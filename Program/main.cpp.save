#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <math.h>

using namespace std;

int String_to_int(string str)
{
    int number = 0, symb_to_int;
    for(int i = 0; i<str.length(); i++)
    {
        symb_to_int = str[i];
        if(symb_to_int<58 && symb_to_int>47)
        {
            number+=(symb_to_int-48)*pow(10, str.length()-i-1);
        }
    }
    if(str[0]=='-')
        number -= 2*number;
    return number;
}

void solve_problem(string path_in, string path_out)
{
    string line, this_number="";
    ifstream in(path_in);
    ofstream out(path_out);
    cout << endl;
    int symb_to_int, n=0, m=0;

    while(getline(in, line))
        m++;
    in.clear();
    in.seekg(0);
    bool started = false;
    while(!in.eof())
    {
        string x;
        in >> x;
        if(x=="|" && started==false)
        {
            started = true;
            continue;
        }
        if(x=="|" && started==true)
            break;
        n++;
    }

    cout << "m : "<< m << endl << "n : " << n << endl;
    in.clear();
    in.seekg(0);
    int i =0, j=0;

    int matrix[m][n];
    while(getline(in, line))
    {
        for(int a = 0; a<line.length(); a++)
        {
            symb_to_int = line[a];
            if(symb_to_int<58 && symb_to_int>47 || symb_to_int==45)
            {
                this_number+=line[a];
            }
            else
                if (this_number!="")\
                {
                    matrix[i][j] = String_to_int(this_number);
                    j++;
                    //cout << this_number<< " to int : " << String_to_int(this_number)<< endl;
                    this_number = "";
                }
            if(symb_to_int==10)
                i++;
        }
    }
    cout << endl << endl;

    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
            cout << setw(3) << matrix[i][j];
        cout << endl;
    }
    i=0; j=-1;
    int alpha = 0, k=0;
    string output;
    int all_directions[][2] = {{0,1},{1,0},{0,-1},{-1,0}};
    int current_direction;
    while(alpha < m && alpha < n)
    {
        alpha+=k%2;
        current_direction = k%4;
        int leng[2]={0,0};
        while(leng[0]<m-alpha && leng[1]<n-alpha)
        {
            i=i+all_directions[current_direction][0];
            j+=all_directions[current_direction][1];
            leng[0]+=abs(all_directions[current_direction][0]);
            leng[1]+=abs(all_directions[current_direction][1]);
            output +=to_string(matrix[i][j]) + " ";
            cout << setw(3) << matrix[i][j];
        }
        k++;
    }

    if(m>n && n-alpha == 0)
    {
        int leng[2]={0,0};
        while(leng[0]<m-alpha)
        {
            i=i+all_directions[current_direction][0];
            j+=all_directions[current_direction][1];
            leng[0]+=abs(all_directions[current_direction][0]);
            leng[1]+=abs(all_directions[current_direction][1]);
            cout << setw(3) << matrix[i][j];
            output +=to_string(matrix[i][j]) + " ";
        }
    }
    out << output;
}
int main()
{
    solve_problem("input.txt", "output.txt");
    return 0;
}
